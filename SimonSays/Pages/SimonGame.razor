@page "/simon"
@using SimonSays.Data
@inject SimonGameService GameService

<PageTitle>Simon Says</PageTitle>

<h1>Simon Says</h1>

<div class="info-panel">
    <div class="level">Level: @GameService.CurrentLevel</div>
    <div class="high-score">High Score: @GameService.HighScore</div>
</div>

<div class="game-board">
    <div class="simon-buttons">
        <button class="simon-button red @(ActiveButtonIndex == 0 ? "active" : "")" 
                @onclick="() => ButtonClick(0)"
                disabled="@(!GameService.IsPlayerTurn)"></button>
        <button class="simon-button green @(ActiveButtonIndex == 1 ? "active" : "")" 
                @onclick="() => ButtonClick(1)"
                disabled="@(!GameService.IsPlayerTurn)"></button>
        <button class="simon-button blue @(ActiveButtonIndex == 2 ? "active" : "")" 
                @onclick="() => ButtonClick(2)"
                disabled="@(!GameService.IsPlayerTurn)"></button>
        <button class="simon-button yellow @(ActiveButtonIndex == 3 ? "active" : "")" 
                @onclick="() => ButtonClick(3)"
                disabled="@(!GameService.IsPlayerTurn)"></button>
    </div>
    
    <div class="center-button">
        <button class="start-button" @onclick="StartGame">
            @(GameService.IsPlaying ? "Restart" : "Start Game")
        </button>
    </div>
</div>

<div class="status-message">
    @if (!GameService.IsPlaying)
    {
        <p>Press Start to play!</p>
    }
    else if (GameService.IsPlayerTurn)
    {
        <p>Your turn! Repeat the sequence</p>
    }
    else
    {
        <p>Watch the sequence...</p>
    }
</div>

@code {
    private int? ActiveButtonIndex = null;

    protected override void OnInitialized()
    {
        // Subscribe to events from GameService
        GameService.OnStateChanged += HandleStateChanged;
        GameService.OnButtonHighlight += HighlightButton;
        GameService.OnButtonClear += ClearButtons;
    }

    private void HandleStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from events to prevent memory leaks
        GameService.OnStateChanged -= HandleStateChanged;
        GameService.OnButtonHighlight -= HighlightButton;
        GameService.OnButtonClear -= ClearButtons;
    }

    private async Task StartGame()
    {
        await GameService.StartGame();
    }

    private async Task ButtonClick(int colorIndex)
    {
        await GameService.ButtonPressed(colorIndex);
    }

    private void HighlightButton(int buttonIndex)
    {
        ActiveButtonIndex = buttonIndex;
        InvokeAsync(StateHasChanged);
    }

    private void ClearButtons()
    {
        ActiveButtonIndex = null;
        InvokeAsync(StateHasChanged);
    }
}
